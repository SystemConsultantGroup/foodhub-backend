// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["windows", "darwin"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// user 테이블 정의
model User {
  id               BigInt       @id @default(autoincrement())
  email            String
  password         String
  nickname         String
  default_photo_id Int          @db.TinyInt
  user_photo_uuid  String?
  birth_year       DateTime?
  gender           Int?         @db.TinyInt
  isActivated      Boolean
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @default(now()) @updatedAt
  deletedAt        DateTime?
  UserGroups       UserGroup[]
  Restaurants      Restaurant[]
  Files            File[]
  Reviews          Review[]
}

model SidoArea {
  id        BigInt     @id @default(autoincrement())
  name      String
  SiggAreas SiggArea[]
}

model SiggArea {
  id       BigInt    @id @default(autoincrement())
  name     String
  sidoId   BigInt
  sido     SidoArea  @relation(fields: [sidoId], references: [id])
  EmdAreas EmdArea[]
}

model EmdArea {
  id     BigInt   @id @default(autoincrement())
  name   String
  siggId BigInt
  sigg   SiggArea @relation(fields: [siggId], references: [id])
  Groups Group[]
}

model Group {
  id          BigInt       @id @default(autoincrement())
  name        String
  type        Int          @db.TinyInt
  areaId      BigInt
  area        EmdArea      @relation(fields: [areaId], references: [id])
  isPublic    Boolean
  password    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  deletedAt   DateTime?
  UserGroups  UserGroup[]
  Restaurants Restaurant[]
  Files       File[]
  Invitations Invitation[]
  Votes       Vote[]
}

model UserGroup {
  id          BigInt    @id @default(autoincrement())
  userId      BigInt
  user        User      @relation(fields: [userId], references: [id])
  groupId     BigInt
  group       Group     @relation(fields: [groupId], references: [id])
  nickname    String
  authority   Int       @db.TinyInt
  isActivated Boolean
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  deletedAt   DateTime?
}

model Category {
  id          BigInt       @id @default(autoincrement())
  name        String
  Restaurants Restaurant[]
}

model Restaurant {
  id              String          @id @default(uuid())
  userId          BigInt
  user            User            @relation(fields: [userId], references: [id])
  groupId         BigInt
  group           Group           @relation(fields: [groupId], references: [id])
  name            String
  categoryId      BigInt
  category        Category        @relation(fields: [categoryId], references: [id])
  address         String?
  link            String?
  delivery        Boolean?
  comment         String?
  capacity        Int?            @db.TinyInt
  openingHour     String?
  recommendedMenu String?
  orderTip        String?
  isActivated     Boolean
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now()) @updatedAt
  deletedAt       DateTime?
  RestaurantTags  RestaurantTag[]
  Files           File[]
  Reviews         Review[]
  Items           Item[]
}

model Tag {
  id             BigInt          @id @default(autoincrement())
  name           String
  RestaurantTags RestaurantTag[]
}

model RestaurantTag {
  id           BigInt     @id @default(autoincrement())
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  tagId        BigInt
  tag          Tag        @relation(fields: [tagId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  deletedAt    DateTime?
}

model File {
  uuid         String      @id @default(uuid())
  restaurantId String?
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  userId       BigInt?
  user         User?       @relation(fields: [userId], references: [id])
  groupId      BigInt?
  group        Group?      @relation(fields: [groupId], references: [id])
  name         String
  mimeType     String
  size         Int
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt
  deletedAt    DateTime?
}

model Review {
  id           BigInt     @id @default(autoincrement())
  userId       BigInt
  user         User       @relation(fields: [userId], references: [id])
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  score        Int        @db.TinyInt
  content      String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  deletedAt    DateTime?
}

model Invitation {
  id          BigInt    @id @default(autoincrement())
  groupId     BigInt
  group       Group     @relation(fields: [groupId], references: [id])
  link        String
  expireAt    DateTime?
  limitNumber Int?
  useNumber   Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  deletedAt   DateTime?
}

model Vote {
  id             BigInt    @id @default(autoincrement())
  name           String
  groupId        BigInt
  group          Group     @relation(fields: [groupId], references: [id])
  isDuplicatable Boolean
  isSecret       Boolean
  isAppendable   Boolean
  isDraft        Boolean
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
  deletedAt      DateTime?
  Items          Item[]
}

model Item {
  id               BigInt      @id @default(autoincrement())
  voteId           BigInt
  vote             Vote        @relation(fields: [voteId], references: [id])
  restaurantId     String?
  restaurant       Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantName String?
  score            Int
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @default(now()) @updatedAt
  deletedAt        DateTime?
  ItemUsers        ItemUser[]
}

model ItemUser {
  id     BigInt @id @default(autoincrement())
  itemId BigInt
  item   Item   @relation(fields: [itemId], references: [id])
}
